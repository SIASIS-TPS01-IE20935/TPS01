import { redisClient } from "../../../../config/Redis/RedisClient";
import { EXPRESION_REGULAR_PARA_IDENTIFICADORES_SIASIS } from "../../../../constants/REGEXP";
import { TipoAsistencia } from "../../../../interfaces/shared/AsistenciaRequests";
import { RolesSistema } from "../../../../interfaces/shared/RolesSistema";
import { obtenerFechasActuales } from "../../../utils/dates/obtenerFechasActuales";

// Interfaz para el tipo de registro que retorna la funci√≥n
export interface RegistroPersonalRedis {
  fecha: string;
  modoRegistro: string;
  rol: string;
  id: string; // Para la mayor√≠a de roles ser√° ID, para directivos ser√° Id_Directivo como string
  timestamp: number;
  desfaseSegundos: number;
  claveRedis: string;
  // üÜï NUEVO CAMPO para identificar si es un directivo
  esDirectivo?: boolean;
  idDirectivo?: number; // Solo para directivos, convierte el ID string a number
}

/**
 * Obtiene los registros de asistencia del personal almacenados en Redis
 * para la fecha actual
 * üÜï ACTUALIZADA para manejar directivos que usan Id_Directivo en lugar de ID
 */
export async function obtenerRegistrosAsistenciaPersonalRedis(): Promise<
  RegistroPersonalRedis[]
> {
  try {
    console.log(
      "üîç Obteniendo registros de asistencia de personal desde Redis..."
    );

    // Obtener la fecha actual en Per√∫ en formato YYYY-MM-DD
    const { fechaLocalPeru } = obtenerFechasActuales();
    const fechaFormateada = fechaLocalPeru.toISOString().split("T")[0];

    // Utilizamos el cliente Redis espec√≠fico para registros de personal
    const redisClientePersonal = redisClient(TipoAsistencia.ParaPersonal);

    // Buscamos todas las claves que corresponden a la fecha actual
    const patron = `${fechaFormateada}:*`;
    const claves = await redisClientePersonal.keys(patron);

    console.log(
      `üìä Se encontraron ${claves.length} registros en Redis para la fecha ${fechaFormateada}`
    );

    // Si no hay claves, retornar array vac√≠o
    if (claves.length === 0) {
      console.log("‚ÑπÔ∏è  No se encontraron registros en Redis para procesar");
      return [];
    }

    // Obtenemos los valores para cada clave encontrada
    const registros: RegistroPersonalRedis[] = [];
    let registrosInvalidos = 0;
    let registrosDirectivos = 0;
    let registrosOtrosRoles = 0;

    for (const clave of claves) {
      try {
        const valor = await redisClientePersonal.get(clave);

        if (!valor) {
          console.warn(`‚ö†Ô∏è  Valor vac√≠o para la clave: ${clave}`);
          registrosInvalidos++;
          continue;
        }

        // Parsear la clave para extraer informaci√≥n
        // Formato esperado: YYYY-MM-DD:ModoRegistro:Actor:ID_o_ID
        const partesClave = clave.split(":");

        if (partesClave.length < 4) {
          console.warn(
            `‚ö†Ô∏è  Formato de clave inv√°lido: ${clave} (esperado: fecha:modo:actor:ID_o_id)`
          );
          registrosInvalidos++;
          continue;
        }

        const [fecha, modoRegistro, rol, identificador] = partesClave;

        // üÜï L√ìGICA ESPECIAL PARA DIRECTIVOS
        const esDirectivo = rol === RolesSistema.Directivo;
        let idParaRegistro = identificador;
        let idDirectivo: number | undefined;

        if (esDirectivo) {
          // Para directivos, el identificador es el Id_Directivo (n√∫mero)
          const idDirectivoNum = parseInt(identificador);

          if (isNaN(idDirectivoNum) || idDirectivoNum <= 0) {
            console.warn(
              `‚ö†Ô∏è  Id_Directivo inv√°lido en clave ${clave}: ${identificador}`
            );
            registrosInvalidos++;
            continue;
          }

          idDirectivo = idDirectivoNum;
          idParaRegistro = identificador; // Mantenemos como string para compatibilidad
          registrosDirectivos++;

          console.log(`üè¢ Directivo encontrado: Id_Directivo = ${idDirectivo}`);
        } else {
          // Para otros roles, validar que sea un ID v√°lido (8 d√≠gitos)
          if (!EXPRESION_REGULAR_PARA_IDENTIFICADORES_SIASIS.test(identificador)) {
            console.warn(
              `‚ö†Ô∏è  ID inv√°lido en clave ${clave}: ${identificador}`
            );
            registrosInvalidos++;
            continue;
          }
          registrosOtrosRoles++;
        }

        // Para personal, el valor es un array [timestamp, desfaseSegundos]
        if (!Array.isArray(valor) || valor.length < 2) {
          console.warn(
            `‚ö†Ô∏è  Formato de valor inv√°lido para clave ${clave}:`,
            valor
          );
          registrosInvalidos++;
          continue;
        }

        const timestamp = Number(valor[0]);
        const desfaseSegundos = Number(valor[1]);

        // Validar que sean n√∫meros v√°lidos
        if (isNaN(timestamp) || isNaN(desfaseSegundos)) {
          console.warn(
            `‚ö†Ô∏è  Datos num√©ricos inv√°lidos en clave ${clave}:`,
            valor
          );
          registrosInvalidos++;
          continue;
        }

        // Validar que el timestamp sea razonable (no muy antiguo ni futuro)
        const ahora = Date.now();
        const diferenciaDias =
          Math.abs(ahora - timestamp) / (1000 * 60 * 60 * 24);

        if (diferenciaDias > 2) {
          // M√°s de 2 d√≠as de diferencia
          console.warn(
            `‚ö†Ô∏è  Timestamp sospechoso en clave ${clave}: ${new Date(
              timestamp
            ).toISOString()}`
          );
          // No marcamos como inv√°lido, pero lo reportamos
        }

        registros.push({
          fecha,
          modoRegistro,
          rol,
          id: idParaRegistro, // Para directivos ser√° Id_Directivo como string
          timestamp,
          desfaseSegundos,
          claveRedis: clave,
          // üÜï CAMPOS ADICIONALES PARA DIRECTIVOS
          esDirectivo,
          idDirectivo,
        });
      } catch (error) {
        console.error(`‚ùå Error al procesar clave ${clave}:`, error);
        registrosInvalidos++;
      }
    }

    console.log(
      `‚úÖ Se procesaron ${registros.length} registros v√°lidos de personal`
    );
    console.log(`üè¢ Registros de directivos: ${registrosDirectivos}`);
    console.log(`üë• Registros de otros roles: ${registrosOtrosRoles}`);

    if (registrosInvalidos > 0) {
      console.warn(
        `‚ö†Ô∏è  Se encontraron ${registrosInvalidos} registros inv√°lidos que fueron ignorados`
      );
    }

    // Mostrar ejemplos de registros encontrados para debugging
    if (registros.length > 0) {
      console.log(`üîç Ejemplos de registros procesados:`);

      // Mostrar ejemplo de directivo si existe
      const ejemploDirectivo = registros.find((r) => r.esDirectivo);
      if (ejemploDirectivo) {
        console.log(
          `üè¢ Directivo: Id=${ejemploDirectivo.idDirectivo}, Rol=${ejemploDirectivo.rol}, Modo=${ejemploDirectivo.modoRegistro}`
        );
      }

      // Mostrar ejemplos de otros roles
      const ejemplosOtros = registros.filter((r) => !r.esDirectivo).slice(0, 2);
      ejemplosOtros.forEach((r) => {
        console.log(
          `üë• ${r.rol}: ID=${r.id}, Modo=${
            r.modoRegistro
          }, Timestamp=${new Date(r.timestamp).toLocaleString()}`
        );
      });
    }

    return registros;
  } catch (error) {
    console.error(
      "‚ùå Error al obtener registros de asistencia desde Redis:",
      error
    );
    throw new Error(
      `Error al obtener registros de Redis: ${
        error instanceof Error ? error.message : String(error)
      }`
    );
  }
}
